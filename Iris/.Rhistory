fit <- glm(count ~ x + offset(t2), family = poisson)
summary(fit)$coef
2.65603530-log(10)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
plot(x,y)
lm(I(sign(x)*y) ~ x)
cbind(c(1), c(1,2,3,4,5,6,7,8,9,10), c(1,2,3,4))
choose(5,2)
choose(28,16)
.libPaths()
install.packages(pkgs = caret, lib = "/usr/lib/R/library2")
install.packages(pkgs = "caret", lib = "/usr/lib/R/library2")
q()
install.packages(pkgs = "caret", lib = "/usr/lib/R/library2")
install.packages(pkgs = "caret", lib = "/usr/lib/R/library")
q()
install.packages(pkgs = "kernlab", lib = "/usr/lib/R/library")
q()
q()
install.packages(pkgs = "shiny", lib = "/usr/lib/R/library")
q()
install.packages(pkgs = "rCharts", lib = "/usr/lib/R/library")
install.packages(pkgs = "devtools", lib = "/usr/lib/R/library")
install.packages(pkgs = "UsingR", lib = "/usr/lib/R/library")
q()
install.packages(pkgs = "UsingR", lib = "/usr/lib/R/library")
install.packages(pkgs = "e1071", lib = "/usr/lib/R/library")
q()
install.packages(pkgs = "rattle", lib = "/usr/lib/R/library")
q()
install.packages(pkgs = "rpart.plot", lib = "/usr/lib/R/library")
q()
install.packages(pkgs = "ElemStatLearn", lib = "/usr/lib/R/library")
q()
install.packages(pkgs = "forecast", lib = "/usr/lib/R/library")
q()
install.packages(pkgs = "lubridate", lib = "/usr/lib/R/library")
q()
q()
hist(c(1.70, 0.77, 2.24, 1.10, 0.62, 2.00, 1.97, 3.04, 2.11, 1.42, 1.87, 0.71, 0.87, 1.95, 0.36, 1.64, 1.47, 0.41, 1.98, 4.94, 1.70, 1.38, 0.19, 1.97, 2.78, 2.51, 1.90, 0.93, 1.21, 1.30, 1.02, 2.29, 0.64, 1.28, 0.89, 1.70, 1.08))
hist(c(1.70, 0.77, 2.24, 1.10, 0.62, 2.00, 1.97, 3.04, 2.11, 1.42, 1.87, 0.71, 0.87, 1.95, 0.36, 1.64, 1.47, 0.41, 1.98, 4.94, 1.70, 1.38, 0.19, 1.97, 2.78, 2.51, 1.90, 0.93, 1.21, 1.30, 1.02, 2.29, 0.64, 1.28, 0.89, 1.70, 1.08), 100)
min(c(1.70, 0.77, 2.24, 1.10, 0.62, 2.00, 1.97, 3.04, 2.11, 1.42, 1.87, 0.71, 0.87, 1.95, 0.36, 1.64, 1.47, 0.41, 1.98, 4.94, 1.70, 1.38, 0.19, 1.97, 2.78, 2.51, 1.90, 0.93, 1.21, 1.30, 1.02, 2.29, 0.64, 1.28, 0.89, 1.70, 1.08))
summary(c(1.70, 0.77, 2.24, 1.10, 0.62, 2.00, 1.97, 3.04, 2.11, 1.42, 1.87, 0.71, 0.87, 1.95, 0.36, 1.64, 1.47, 0.41, 1.98, 4.94, 1.70, 1.38, 0.19, 1.97, 2.78, 2.51, 1.90, 0.93, 1.21, 1.30, 1.02, 2.29, 0.64, 1.28, 0.89, 1.70, 1.08))
sort?(c(1.70, 0.77, 2.24, 1.10, 0.62, 2.00, 1.97, 3.04, 2.11, 1.42, 1.87, 0.71, 0.87, 1.95, 0.36, 1.64, 1.47, 0.41, 1.98, 4.94, 1.70, 1.38, 0.19, 1.97, 2.78, 2.51, 1.90, 0.93, 1.21, 1.30, 1.02, 2.29, 0.64, 1.28, 0.89, 1.70, 1.08))
sort(c(1.70, 0.77, 2.24, 1.10, 0.62, 2.00, 1.97, 3.04, 2.11, 1.42, 1.87, 0.71, 0.87, 1.95, 0.36, 1.64, 1.47, 0.41, 1.98, 4.94, 1.70, 1.38, 0.19, 1.97, 2.78, 2.51, 1.90, 0.93, 1.21, 1.30, 1.02, 2.29, 0.64, 1.28, 0.89, 1.70, 1.08))
summary(c(1.70, 0.77, 2.24, 1.10, 0.62, 2.00, 1.97, 3.04, 2.11, 1.42, 1.87, 0.71, 0.87, 1.95, 0.36, 1.64, 1.47, 0.41, 1.98, 4.94, 1.70, 1.38, 0.19, 1.97, 2.78, 2.51, 1.90, 0.93, 1.21, 1.30, 1.02, 2.29, 0.64, 1.28, 0.89, 1.70, 1.08))
sd(c(1.70, 0.77, 2.24, 1.10, 0.62, 2.00, 1.97, 3.04, 2.11, 1.42, 1.87, 0.71, 0.87, 1.95, 0.36, 1.64, 1.47, 0.41, 1.98, 4.94, 1.70, 1.38, 0.19, 1.97, 2.78, 2.51, 1.90, 0.93, 1.21, 1.30, 1.02, 2.29, 0.64, 1.28, 0.89, 1.70, 1.08))
abline(v = 1.566)
abline(v = 1.566-0.8903416)
abline(v = 1.566+0.8903416)
abline(v = 1.566+2*0.8903416)
abline(v = 1.566+3*0.8903416)
max(c())
max(c(0.8903416))
max(c(1.70, 0.77, 2.24, 1.10, 0.62, 2.00, 1.97, 3.04, 2.11, 1.42, 1.87, 0.71, 0.87, 1.95, 0.36, 1.64, 1.47, 0.41, 1.98, 4.94, 1.70, 1.38, 0.19, 1.97, 2.78, 2.51, 1.90, 0.93, 1.21, 1.30, 1.02, 2.29, 0.64, 1.28, 0.89, 1.70, 1.08))
(4.94-1.566)/0.8903416
hist(c(1.65, 1.06, 0.57, 1.23, 0.48, 0.86, 0.93, 0.59, 2.38, 0.49, 1.20, 0.36, 1.03, 1.09, 1.79, 0.81, 1.31, 1.92, 1.37, 0.80, 1.43, 1.50, 2.06, 0.36, 0.95, 1.40, 1.23, 0.79, 2.01, 1.64, 1.37, 1.64, 0.73, 0.40, 0.64, 0.67, 0.54, 0.55, 1.42, 1.26, 0.93, 1.80, 0.62, 0.74, 1.45, 1.01, 0.83, 1.01, 0.81, 0.91, 0.77, 4.99, 0.85, 0.84, 0.66, 1.58, 1.82, 0.15, 1.25, 0.27))
summary(c(1.65, 1.06, 0.57, 1.23, 0.48, 0.86, 0.93, 0.59, 2.38, 0.49, 1.20, 0.36, 1.03, 1.09, 1.79, 0.81, 1.31, 1.92, 1.37, 0.80, 1.43, 1.50, 2.06, 0.36, 0.95, 1.40, 1.23, 0.79, 2.01, 1.64, 1.37, 1.64, 0.73, 0.40, 0.64, 0.67, 0.54, 0.55, 1.42, 1.26, 0.93, 1.80, 0.62, 0.74, 1.45, 1.01, 0.83, 1.01, 0.81, 0.91, 0.77, 4.99, 0.85, 0.84, 0.66, 1.58, 1.82, 0.15, 1.25, 0.27))
M=matrix(c(0,0.5,0.5,0,0,1,1,0,0),3,3)
M
m*c(1,1,1)
M*c(1,1,1)
r=matrix(c(1,1,1)3,1)
r
r=matrix(c(1,1,1),3,1)
r
M*r
?"*"
M%*%r
?"for"
for (i in 1:5) {
r_=M%*%r
i
r_
r=r_
}
for (i in 1:5) {
r_=M%*%r
cat(i)
r_
r=r_
}
for (i in 1:5) {
r_=M%*%r
print(i)
r_
r=r_
}
i
for (i in 1:5) {
r_=M%*%r
print(i, r_)
r_
r=r_
}
for (i in 1:5) {
r_=M%*%r
print(i, r_)
r_
r=r_
}
for (i in 1:5) {
r_=M%*%r
print(i)
print(r_)
r=r_
}
for (i in 1:5) {
r_=M%*%r
print(i)
print(r_)
print("\n")
r=r_
}
for (i in 1:5) {
r_=M%*%r
print(i)
print(r_)
cat("\n")
r=r_
}
M=matrix(c(0,0.5,0.5,0,0,1,1,0,0),3,3)
r=matrix(c(1,1,1),3,1)
for (i in 1:5) {
r_=M%*%r
print(i)
print(r_)
cat("\n")
r=r_
}
M=matrix(c(0.1,0.45,0.45,0.1,0.1,0.8,.0.1,0.1,0.8),3,3)
r=matrix(c(1,1,1),3,1)
while (diff>0.0001) {
r_=M%*%r
diff=sum(abs(r-r_))
r=r_
}
M=matrix(c(0.1,0.45,0.45,0.1,0.1,0.8,.0.1,0.1,0.8),3,3)
r=matrix(c(1,1,1),3,1)
r_=M%*%r
diff=sum(abs(r-r_))
r=r_
diff
r_
r
diff>0.0001
r_=M%*%r
diff=sum(abs(r-r_))
diff
r_
r
r=r_
r_=M%*%r
diff=sum(abs(r-r_))
r=r_
r_=M%*%r
diff=sum(abs(r-r_))
r=r_
r_=M%*%r
diff=sum(abs(r-r_))
r=r_
r_=M%*%r
diff=sum(abs(r-r_))
r=r_
r_=M%*%r
diff=sum(abs(r-r_))
r=r_
r_=M%*%r
diff=sum(abs(r-r_))
r=r_
r_=M%*%r
diff=sum(abs(r-r_))
r=r_
r_=M%*%r
diff=sum(abs(r-r_))
r=r_
r_=M%*%r
diff=sum(abs(r-r_))
r=r_
r_=M%*%r
diff=sum(abs(r-r_))
r=r_
r_=M%*%r
diff=sum(abs(r-r_))
r=r_
r_=M%*%r
diff=sum(abs(r-r_))
r=r_
r_=M%*%r
diff=sum(abs(r-r_))
r=r_
r_=M%*%r
diff=sum(abs(r-r_))
r=r_
diff
diff>0.0001
while (diff>0.0001) {
r_=M%*%r
diff=sum(abs(r-r_))
r=r_
}
M=matrix(c(0.1,0.45,0.45,0.1,0.1,0.8,0.1,0.1,0.8),3,3)
M
r=matrix(c(1,1,1),3,1)
while (diff>0.0001) {
r_=M%*%r
diff=sum(abs(r-r_))
r=r_
}
r
r_
r
rm(r_)
rm(r)
M=matrix(c(0.1,0.45,0.45,0.1,0.1,0.8,0.1,0.1,0.8),3,3)
r=matrix(c(1,1,1),3,1)
while (diff>0.0001) {
r_=M%*%r
diff=sum(abs(r-r_))
r=r_
}
M=matrix(c(0.1,0.45,0.45,0.1,0.1,0.8,0.1,0.1,0.8),3,3)
r=matrix(c(1,1,1),3,1)
while (diff>0.0001) {
r_=M%*%r
diff=sum(abs(r-r_))
r=r_
}
?"<-"
while (diff>0.0001) {
r_<<-M%*%r
diff<<-sum(abs(r-r_))
r<<-r_
}
while (dif>0.0001) {
r_<<-M%*%r
dif<<-sum(abs(r-r_))
r<<-r_
}
dif=1
while (dif>0.0001) {
r_=M%*%r
dif=sum(abs(r-r_))
r=r_
}
r
r[1]+r[2]
r[1]+r[3]
setwd("~/Documents/MOOC/Data/Products/w1_05")
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h2('Big text')
h3('Sidebar')
),
mainPanel(
h3('Main Panel text')
)
))
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h2('Big text'),
h3('Sidebar')
),
mainPanel(
h3('Main Panel text')
)
))
?checkboxGroupInput
tester=function(x,y){
y=2*x
}
tester(2,z)
tester=function(x,y){
y=2*x
}
tester(2,z)
z
tester(2)
a$3=2
a$b=2
tester=function(x,y){
y$a=2*x
}
tester(2)
tester(2,z)
z=list(b=2,c=3)
z
z$b
tester(2,z)
z
tester=function(x,y){
y$a=2*x
y$b=1
}
z=list(b=2,c=3)
tester(2,z)
z
setwd("~/Documents/MOOC/Data/Products")
runApp()
getwd()
setwd("~/Documents/MOOC/Data/Products")
setwd("~/Documents/MOOC/Data/Products/shiny1")
runApp()
runApp()
runApp()
runApp()
library(data)
library(datasets)
load(iris)
iris
data(iris)
setwd("~/Documents/MOOC/Data/Products/shiny2")
setwd("~/Documents/MOOC/Data/Products")
setwd("~/Documents/MOOC/Data/Products/navbarPage1")
runApp()
?load
?save.image
?save
getwd()
setwd("~/Documents/MOOC/Data/Products/Project")
library (datasets)
data(iris)
head(iris)
inTrain=createDataPartition(iris$Species, p=0.75, list=FALSE)
training=iris[inTrain,]
testing=iris[-inTrain,]
model = train(Species ~ ., data=iris, method="rpart")
library(caret)
inTrain=createDataPartition(iris$Species, p=0.75, list=FALSE)
training=iris[inTrain,]
testing=iris[-inTrain,]
model = train(Species ~ ., data=iris, method="rpart")
modelFit$finalModel
model
model$finalModel
plot(training[,3:4], col=training[,5]
)
plot(training[,3:4], col=training[,5])
dim(training)
dim(iiris)
dim(iris)
model = train(Species ~ ., data=training, method="rpart")
model
model$finalModel
plot(training[,3:4], col=training[,5])
plot(iris[,3:4], col=iris[,5])
model = train(Species ~ ., data=training, method="rf")
model
model$finalModel
model2=model
model1 = train(Species ~ ., data=training, method="rpart")
pred1 = predict(model1, newdata=testing)
confusionMatrix(pred1, testing$type)
pred1
confusionMatrix(pred1, testing$Species)
pred2 = predict(model2, newdata=testing)
confusionMatrix(pred2, testing$Species)
pred = predict(model, newdata=testing)
confusionMatrix(pred, testing$Species)
save(model)
save(model, "model")
save(model, file="model")
save(model, file="model.RData")
summary(iris)
summary(iris)[[c(1,3)]]
summary(iris)[[c(1,2)]]
summary(iris)[c(1,3)]
str(summary(iris))
summary(iris)[1]
summary(iris)[3]
summary(iris)[1,3]
summary(iris)[1,5]
summary(iris)[4,5]
summary(iris)[,c(1,6)]
summary(iris)[c(1,6),]
summary(iris)[c(1,6),1:4]
methods(predict)
?predict.randomForest
predict(model, [1,2,3,4])
predict(model, c(1,2,3,4)]
predict(model, c(1,2,3,4))
colnames(iris)
predict(model, list=(Sepal.Length=1, Sepal.Width=1,  Petal.Length=1, Petal.Width=1))
predict(model, list(Sepal.Length=1, Sepal.Width=1,  Petal.Length=1, Petal.Width=1))
predict(model, list(Sepal.Length=.1, Sepal.Width=.1,  Petal.Length=.1, Petal.Width=.1))
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?predict
shiny::runApp()
predict(model, list(Sepal.Length=.1, Sepal.Width=.1,  Petal.Length=.1, Petal.Width=.1))
predict(model, list(Sepal.Length=.1, Sepal.Width=.1,  Petal.Length=.1, Petal.Width=.1))[1]
shiny::runApp()
shiny::runApp()
model=load("model.RData")
predict(model, list(Sepal.Length=.1, Sepal.Width=.1,  Petal.Length=.1, Petal.Width=.1))[1]
model
shiny::runApp()
library (datasets)
data(iris)
library(caret)
set.seed(123)
inTrain=createDataPartition(iris$Species, p=0.75, list=FALSE)
training=iris[inTrain,]
testing=iris[-inTrain,]
set.seed(321)
model = train(Species ~ ., data=training, method="rf")
model
model$finalModel
pred = predict(model, newdata=testing)
confusionMatrix(pred, testing$Species)
save(model, file="model.RData")
model_=load("model.RData")
model
shiny::runApp()
model
model_
save
?save
save("model", file="model.RData")
model_=load("model.RData")
model_=data("model.RData")
model_=load("model.RData")
load("model.RData")
rm(model)
rm(model_)
load("model.RData")
shiny::runApp()
model
model$final
?iris
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?par
colors
colors()
colors(1:3)
colors()[1:3]
colors()[c(unique(iris[,5]))]
colors()[(iris[,5]]
colors()[iris[,5]]
plot(iris[,3:4], col=colors[1])
plot(iris[,3:4], col=colors()[1])
plot(iris[,3:4], col=colors()[2])
plot(iris[,3:4], col=colors()[3])
plot(iris[,3:4], col=iris[1,5])
plot(iris[,3:4], col=iris[60,5])
plot(iris[,3:4], col="were")
iris[,5]
shiny::runApp()
shiny::runApp()
shiny::runApp()
summary(iris)[c(1,6),1:4]
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
unique(iris[,5])
names=c(setosa="Iris setosa", versicolor="Iris versicolor", virginica="Iris virginica")
names
names[setosa]
names["setosa"]
print(names["setosa"])
cat(names["setosa"])
shiny::runApp()
unique(iris[,5])
predict(model, list(Sepal.Length=1, Sepal.Width=1,  Petal.Length=1, Petal.Width=1))
cat(predict(model, list(Sepal.Length=1, Sepal.Width=1,  Petal.Length=1, Petal.Width=1)))
unlevel(predict(model, list(Sepal.Length=1, Sepal.Width=1,  Petal.Length=1, Petal.Width=1)))
droplevels(predict(model, list(Sepal.Length=1, Sepal.Width=1,  Petal.Length=1, Petal.Width=1)))
as.vector(predict(model, list(Sepal.Length=1, Sepal.Width=1,  Petal.Length=1, Petal.Width=1)))
shiny::runApp()
shiny::runApp()
?navbarPage
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?a
library(shinyapps)
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='stefanloska', token='EABC9CD238FA27CEE3E102B9006B5AAD', secret='LaKh2cMGMwyq6yPnNXWpk4X5K6EUP2ObxrsxXvsa')
setwd("~/Documents/MOOC/Data/Products/Project/App")
deployApp()
library(shinyapps)
deployApp()
setwd("~/Documents/MOOC/Data/Products/Project/Iris")
deployApp()
shiny::runApp()
